
begin class Array<T>

type Predicate = (T -> Boolean)

def filter(Predicate) -> Array<T>:
	map((T) => 
		if (Predicate(T)):
			Array<T>(T)
		else:
			Array<T>()
	)
	flatten

def flatten<E>[T : Iterable<E>]() -> Array<E>:
	Array<E>()
	Array<T>.forEach((Iterable<E>) => Iterable<E>.forEach(push(_)))

end class

// -------------------------------------- //

begin class StringCalculator

type Delimiter < Char

private def checkNoNegatives(Array<Integer>) -> Unit:
	filter((Integer) => Integer < 0)
	if (size() > 1):
		throw ValueError("No negatives allowed: ${Array.toString()}")

private def add(Delimiter, String) -> Integer:
	if (equals("")):
		0
	else:
		split(Delimiter, '\n')
		map(toInteger)
		checkNoNegatives(_)
		sum()

def add(String) -> Integer:
	if (startsWith("//")):
		add(at(2), drop(4))
	else:
		add(',', String)

end

// -------------------------------------- //

begin test StringCalculatorTest

val StringCalculator()

test:	add("") = 0
test:	add("1") = 1
test:	add("2") = 2
test: 	add(c) = 3
test:	add("1,2,3,4") = 10
test:	add("1,2\n3,4") = 10
test:	add("//;\n1;2;3") = 6
test:   add("1,-2") shouldThrow ValueError("Negatives not allowed: [-2]") 

end